-- 서브쿼리
-- ★ 1. 서브쿼리 개념 : 메인쿼리 안에 서브쿼리. 메인쿼리 수행전 한번만 실행. ()둘러쌓여
SELECT ENAME, SAL, AVG(SAL) FROM EMP;
SELECT AVG(SAL) FROM EMP;
SELECT ENAME, SAL, (SELECT ROUND(AVG(SAL)) FROM EMP) FROM EMP;
SELECT ENAME, SAL, 48 FROM EMP;

SELECT ENAME, MIN(HIREDATE) FROM EMP; --불가
SELECT ENAME, HIREDATE FROM EMP WHERE HIREDATE=(SELECT MIN(HIREDATE) FROM EMP);

SELECT DNAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT';
-- ★ 2. 단일행 서브쿼리 : 서브쿼리의 수행결과가 단일행 일때
SELECT DNAME FROM DEPT WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT');
SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT';
    -- 'SCOTT'의 부서명
SELECT ENAME, MAX(SAL) FROM EMP; -- ERROR
SELECT MAX(SAL) FROM EMP;-- sub Query
SELECT ENAME, SAL FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP);
    -- 최대급여를 받는 사람이름과 최대급여
SELECT E1.ENAME, E1.DEPTNO, E2.DEPTNO, E2.ENAME FROM EMP E1, EMP E2
    WHERE E1.DEPTNO=E2.DEPTNO AND E1.ENAME='SCOTT' AND E2.ENAME!='SCOTT'; --selfJoin
    
SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT';-- subQuery

SELECT ENAME FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT') AND ENAME!='SCOTT';
    -- SCOTT과 같은 부서번호에 근무하는 직원이름

SELECT E1.ENAME, D1.LOC, D2.LOC, E2.ENAME
    FROM EMP E1, DEPT D1, EMP E2, DEPT D2
    WHERE E1.DEPTNO=D1.DEPTNO AND E2.DEPTNO=D2.DEPTNO AND D1.LOC=D2.LOC
        AND E1.ENAME='SCOTT' AND E2.ENAME!='SCOTT';
SELECT LOC FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT';--subQuery

SELECT ENAME FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND LOC=(SELECT LOC FROM EMP E, DEPT D
                WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT') 
            AND ENAME!='SCOTT';
    -- SCOTT과 같은 근무지(LOC)에 근무하는 직원이름

--탄탄1.	‘SCOTT’와 같은 부서에 근무하는 사원들의 급여 총합을 출력
SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT'; -- 서브쿼리
SELECT SUM(SAL) FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT');--메인쿼리
    
--탄탄2.	SCOTT과 동일한 JOB을 가진 사원의 모든 정보를 출력
SELECT JOB FROM EMP WHERE ENAME='SCOTT'; -- 서브쿼리
SELECT * FROM EMP WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='SCOTT'); --메인쿼리

--탄탄3.	SCOTT의 급여와 동일하거나 더 많이 받는 사원명과 급여를 출력
SELECT SAL FROM EMP WHERE ENAME='SCOTT'; --서브쿼리
SELECT ENAME, SAL FROM EMP WHERE SAL>=(SELECT SAL FROM EMP WHERE ENAME='SCOTT');--메인

--탄탄4. DALLAS에서 근무하는 사원의 이름, 부서번호를 출력(Join 과 서브쿼리 모두 가능)
--JOIN
SELECT ENAME, E.DEPTNO FROM EMP E, DEPT D 
    WHERE D.DEPTNO=E.DEPTNO AND LOC='DALLAS';
--서브쿼리
SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS'; -- 서브쿼리
SELECT ENAME, DEPTNO FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS');
    
--탄탄5.	SALES 부서에서 근무하는 모든 사원의 이름과 급여를 출력(Join 과 서브쿼리 모두 가능)
--JOIN
SELECT ENAME, SAL FROM EMP E, DEPT D 
    WHERE E.DEPTNO=D.DEPTNO AND DNAME='SALES';
--서브쿼리
SELECT DEPTNO FROM DEPT WHERE DNAME='SALES';--서브쿼리
SELECT ENAME, SAL FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
    
--탄탄6. 직속상관이 KING인 사원의 이름과 급여를 출력(Self join과 서브 쿼리 모두 가능)
--SELF JOIN
SELECT W.ENAME, W.SAL
    FROM EMP W, EMP M
    WHERE W.MGR=M.EMPNO AND M.ENAME='KING';
--서브쿼리
SELECT EMPNO FROM EMP WHERE ENAME='KING'; -- 서브쿼리(KING의 사번)
SELECT ENAME, SAL FROM EMP 
    WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='KING');

SELECT JOB FROM EMP WHERE ENAME='SCOTT'; --subQuery①
SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT';--subQuery②
SELECT * FROM EMP
    WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='SCOTT') AND
        DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT');
        
SELECT JOB, DEPTNO FROM EMP WHERE ENAME='SCOTT';--subQuery①+subQuery②
SELECT * FROM EMP
    WHERE (JOB, DEPTNO)=(SELECT JOB, DEPTNO FROM EMP WHERE ENAME='SCOTT');
    -- SCOTT과 같은 JOB이면서 SCOTT과 같은 부서에 근무하는 직원의 모든 정보를 출력



-- ★ 3. 다중행서브쿼리 : 서브쿼리의 수행결과가 2행이상일 때
    -- 단일행 서브쿼리 사용시 연산자 : =  >=  > < <=
    -- 다중행 서브쿼리 사용시 연산자 : IN, ALL ANY(SOME), EXISTS
SELECT * FROM EMP WHERE DEPTNO IN (10,20);
    -- 부서번호가 10,20부서 직원의 모든 정보 출력

SELECT DEPTNO FROM EMP WHERE SAL>=3000;
SELECT * FROM EMP WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE SAL>=3000);
SELECT * FROM EMP WHERE DEPTNO IN (20,10,20);
    -- SAL이 3000이상인 사람들의 부서 직원의 정보
SELECT MAX(HIREDATE) FROM EMP;
SELECT ENAME, HIREDATE FROM EMP WHERE HIREDATE = (SELECT MAX(HIREDATE) FROM EMP);
    -- 입사일이 제일 최신인 사람이름과 입사일을 출력
SELECT DEPTNO, MAX(HIREDATE) FROM EMP GROUP BY DEPTNO;
SELECT DEPTNO, ENAME, HIREDATE FROM EMP
    WHERE (DEPTNO, HIREDATE) 
            IN (SELECT DEPTNO, MAX(HIREDATE) FROM EMP GROUP BY DEPTNO);
    -- 부서별 입사일이 최신인 부서번호, 사람이름, 입사일을 출력
SELECT JOB, MIN(SAL) FROM EMP GROUP BY JOB;    
SELECT ENAME, JOB, SAL FROM EMP
    WHERE (JOB, SAL) IN (SELECT JOB, MIN(SAL) FROM EMP GROUP BY JOB);
    -- JOB별로 가장 낮은 급여받는 사람의 이름, JOB, 급여를 출력
SELECT SAL FROM EMP WHERE DEPTNO=30; 
SELECT * FROM EMP WHERE SAL > ALL (SELECT SAL FROM EMP WHERE DEPTNO=30);
   -- 30번부서 사원들 급여보다 많이 받는 사원의 정보 출력 (ALL)
SELECT * FROM EMP WHERE SAL > (SELECT MAX(SAL) FROM EMP WHERE DEPTNO=30);
   -- 30번부서 사원들 최대급여보다 많이 받는 사원의 정보 출력 (ALL)
SELECT * FROM EMP WHERE SAL > ANY (SELECT SAL FROM EMP WHERE DEPTNO=30);
   -- 30번부서 사원들 급여 중 어느 하나보다 많이 받는 사원의 정보 출력 (ANY) 
SELECT * FROM EMP WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE DEPTNO=30);
   -- 30번부서 사원들 최소보다 많이 받는 사원의 정보 출력 (ANY) 
   
SELECT DISTINCT M.*
    FROM EMP W, EMP M
    WHERE W.MGR=M.EMPNO;
    -- 직속 부하가 있는 직원의 모든 정보를 출력(SELF JOIN)
SELECT * FROM EMP WHERE EMPNO IN (SELECT MGR FROM EMP);
   -- 직속 부하가 있는 직원의 모든 정보를 출력(IN)
SELECT * FROM EMP M WHERE EXISTS (SELECT * FROM EMP WHERE MGR=M.EMPNO);
   -- 직속 부하가 있는 직원의 모든 정보를 출력(EXISTS)
   
--탄탄. 직급(JOB)이 MANAGER인 사람의 속한 부서의 부서 번호와 부서명과 지역을 출력(IN)
SELECT DEPTNO FROM EMP WHERE JOB='MANAGER';
SELECT DNAME, LOC FROM DEPT 
    WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE JOB='MANAGER');--서브쿼리
SELECT DNAME, LOC FROM EMP E, DEPT D
    WHERE D.DEPTNO=E.DEPTNO AND JOB='MANAGER';--JOIN
    
--탄탄.급여이 3000이상인 사람들 중 급여 등급을 나누어서 
    --해당 등급별 최고 연봉을 받는 사람들의 사번, 이름, 직업, 입사일, 급여, 급여등급을 출력
SELECT EMPNO, ENAME, JOB, HIREDATE, SAL, GRADE FROM EMP, SALGRADE
    WHERE (GRADE, SAL)
        IN (SELECT GRADE, MAX(SAL) FROM EMP, SALGRADE
            WHERE SAL BETWEEN LOSAL AND HISAL AND SAL>=3000 GROUP BY GRADE);

--탄탄.응용심화 : 입사일 분기별로 가장 높은 연봉을 받는 사람들의 이름, 연봉, 입사일, 
    --분기 출력
SELECT HIREDATE, CEIL(TO_CHAR(HIREDATE, 'MM')/3) FROM EMP;-- 분기 TEST

SELECT CEIL(TO_CHAR(HIREDATE, 'MM')/3), MAX(SAL) FROM EMP
    GROUP BY  CEIL(TO_CHAR(HIREDATE, 'MM')/3); -- 서브쿼리
SELECT ENAME, SAL, HIREDATE, CEIL(TO_CHAR(HIREDATE, 'MM')/3) 분기
    FROM EMP
    WHERE (CEIL(TO_CHAR(HIREDATE, 'MM')/3), SAL)
        IN (SELECT CEIL(TO_CHAR(HIREDATE, 'MM')/3), MAX(SAL) FROM EMP
            GROUP BY  CEIL(TO_CHAR(HIREDATE, 'MM')/3));

SELECT CEIL(EXTRACT(MONTH FROM HIREDATE)/3), MAX(SAL) FROM EMP
    GROUP BY  CEIL(EXTRACT(MONTH FROM HIREDATE)/3); -- 서브쿼리
SELECT ENAME, SAL, HIREDATE, CEIL(EXTRACT(MONTH FROM HIREDATE)/3) 분기
    FROM EMP
    WHERE (CEIL(EXTRACT(MONTH FROM HIREDATE)/3), SAL)
        IN (SELECT CEIL(EXTRACT(MONTH FROM HIREDATE)/3), MAX(SAL) FROM EMP
    GROUP BY  CEIL(EXTRACT(MONTH FROM HIREDATE)/3));
            
--탄탄.SALESMAN 모든 사원들 보다 급여를 많이 받는 사원들의 이름과 급여와 JOB를 출력하되 
    -- 영업 사원은 출력하지 않는다.(ALL이용)
SELECT SAL FROM EMP WHERE JOB='SALESMAN';
SELECT ENAME, SAL, JOB 
    FROM EMP WHERE SAL>ALL(SELECT SAL FROM EMP WHERE JOB='SALESMAN');
    
SELECT ENAME, SAL, JOB 
    FROM EMP WHERE SAL>(SELECT MAX(SAL) FROM EMP WHERE JOB='SALESMAN');
    
--탄탄.SALESMAN 일부 어떤 한 사원보다 급여를 많이 받는 사원들의 이름과 급여와 JOB를 출력하되 
    -- 영업 사원은 출력(ANY)
SELECT SAL FROM EMP WHERE JOB='SALESMAN';
SELECT ENAME, SAL, JOB 
    FROM EMP WHERE SAL>ANY(SELECT SAL FROM EMP WHERE JOB='SALESMAN');
SELECT ENAME, SAL, JOB 
    FROM EMP WHERE SAL>(SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');
   
--탄탄.급여이 3000미만인 사람 중에 가장 최근에 입사한 사람의 사원번호와 이름, 연봉, 입사일 출력
SELECT MAX(HIREDATE) FROM EMP WHERE SAL<3000;
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
    WHERE HIREDATE = (SELECT MAX(HIREDATE) FROM EMP WHERE SAL<3000);

SELECT HIREDATE FROM EMP WHERE SAL<3000;
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP
    WHERE HIREDATE >= ALL (SELECT HIREDATE FROM EMP WHERE SAL<3000);

--탄탄.직급이 ‘SALESMAN’인 사원이 받는 급여의 최소 급여보다 많이 받는 사원들의 
    --이름, 급여, 직급, 부서번호를 출력하되 부서번호가 20번인 사원은 제외한다(ANY)
SELECT SAL FROM EMP WHERE JOB='SALESMAN';
SELECT ENAME, SAL, JOB, DEPTNO FROM EMP 
    WHERE SAL > ANY (SELECT SAL FROM EMP WHERE JOB='SALESMAN') AND DEPTNO <> 20;
    -- 의미상 아래와 같다
SELECT ENAME, SAL, JOB, DEPTNO FROM EMP 
    WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN') AND DEPTNO <> 20;

    
    
--★ 셤 연습문제
--1. 사원 테이블에서 가장 먼저 입사한 사람의 이름, 급여, 입사일을 출력
SELECT MIN(HIREDATE) FROM EMP; -- subQuery
SELECT ENAME, SAL, HIREDATE FROM EMP 
    WHERE HIREDATE=(SELECT MIN(HIREDATE) FROM EMP);
    
--2. 회사에서 가장 급여가 적은 사람의 이름, 급여를 출력
SELECT MIN(SAL) FROM EMP; -- subQuery
SELECT ENAME, SAL FROM EMP WHERE SAL=(SELECT MIN(SAL) FROM EMP);

--3. 회사 평균보다 급여를 많이 받는 사람의 이름, 급여, 부서코드를 출력
SELECT AVG(SAL) FROM EMP; -- subQuery
SELECT ENAME, SAL, DEPTNO FROM EMP
    WHERE SAL>(SELECT AVG(SAL) FROM EMP);
    
--4. 회사 평균 이하의 급여를 받는 사람의 이름, 급여, 부서명을 출력
SELECT AVG(SAL) FROM EMP; -- subQuery
SELECT ENAME, SAL, DNAME FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND SAL<=(SELECT AVG(SAL) FROM EMP);
    
--5. SCOTT보다 먼저 입사한 사람의 이름, 급여, 입사일, 급여 등급을 출력
SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT'; -- subQuery
SELECT ENAME, SAL, HIREDATE, GRADE
    FROM EMP, SALGRADE
    WHERE SAL BETWEEN LOSAL AND HISAL AND
            HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT');
            
--6. 5번에 부서명 추가하고 급여가 큰 순 정렬을 출력
SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT'; -- subQuery
SELECT ENAME, SAL, HIREDATE,GRADE, DNAME
    FROM EMP E, DEPT D, SALGRADE
    WHERE E.DEPTNO=D.DEPTNO AND SAL BETWEEN LOSAL AND HISAL AND
            HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME='SCOTT')
    ORDER BY SAL DESC;
            
--7. 사원테이블에서 BLAKE 보다 급여가 많은 사원들의 사번, 이름, 급여를 출력
SELECT SAL FROM EMP WHERE ENAME='BLAKE'; -- subQuery
SELECT EMPNO, ENAME, SAL FROM EMP 
    WHERE SAL>(SELECT SAL FROM EMP WHERE ENAME='BLAKE');
    
--8. 사원테이블에서 MILLER보다 늦게 입사한 사원의 사번, 이름, 입사일을 출력
SELECT HIREDATE FROM EMP WHERE ENAME='MILLER'; -- subQuery
SELECT EMPNO, ENAME, HIREDATE FROM EMP
    WHERE HIREDATE>(SELECT HIREDATE FROM EMP WHERE ENAME='MILLER');
    
--9. 사원전체 평균 급여보다 급여가 많은 사원들의 사번, 이름, 급여를 출력
SELECT AVG(SAL) FROM EMP;  -- subQuery
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL>(SELECT AVG(SAL) FROM EMP);

--10. CLARK와 같은 부서며, 사번이 7698인 직원의 급여보다 많은 급여를 받는 사원들의
    --사번, 이름, 급여  출력
SELECT DEPTNO FROM EMP WHERE ENAME='CLARK'; -- subQuery
SELECT SAL FROM EMP WHERE EMPNO=7698;    -- subQuery
SELECT EMPNO, ENAME, SAL FROM EMP
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='CLARK') AND
        SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698);

--11. 응용심화. 사원테이블에서 CLARK와 같은 부서명이며, 사번이 7698인 직원의 급여보다
    --많은 급여를 받는 사원들의 사번, 이름, 급여 검색
SELECT DNAME FROM EMP E, DEPT D 
    WHERE E.DEPTNO=D.DEPTNO AND ENAME='CLARK'; -- subQuery
SELECT SAL FROM EMP WHERE EMPNO=7698;    -- subQuery
SELECT EMPNO, ENAME, SAL FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND
        DNAME=(SELECT DNAME FROM EMP E, DEPT D 
            WHERE E.DEPTNO=D.DEPTNO AND ENAME='CLARK') AND
        SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698);
        
--12. 사원 테이블에서 BLAKE와 같은 부서에 있는 모든 사원의 이름과 입사일자 출력
SELECT DEPTNO FROM EMP WHERE ENAME='BLAKE';  -- subQuery
SELECT ENAME, HIREDATE FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='BLAKE');

--13. 사원 테이블에서 평균 급여 이상을 받는 모든 종업원에 대해서 종업원 번호와 이름을 출력
    --(단 급여가 많은 순으로 출력하여라.)
SELECT AVG(SAL) FROM EMP;   -- subQuery
SELECT EMPNO, ENAME FROM EMP 
    WHERE SAL>=(SELECT AVG(SAL) FROM EMP)
    ORDER BY SAL DESC;

--14. 이름에 “T”가 있는 사원이 근무하는 부서에서 근무하는 모든 종업원에 대해 
    -- 사원 번호,이름,급여를 출력하는 SELECT문을 작성하시오. 단 사원번호 순으로 출력하여라.
SELECT EMPNO, ENAME, SAL FROM EMP 
    WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE ENAME LIKE '%T%')
    ORDER BY EMPNO;
    
--15. 부서 위치가 Dallas인 모든 종업원에 대해 이름,업무,급여를 출력
SELECT ENAME, JOB, SAL FROM EMP
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE INITCAP(LOC)='Dallas'); -- 서브쿼리 이용
SELECT ENAME, JOB, SAL FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND INITCAP(LOC)='Dallas'; -- EQUI JOIN이용

--16. King에게 보고하는 모든 사원의 이름과 급여를 출력
SELECT ENAME, SAL FROM EMP
    WHERE MGR = (SELECT EMPNO FROM EMP WHERE INITCAP(ENAME)='King'); --서브쿼리 이용
SELECT W.ENAME, W.SAL FROM EMP W, EMP M
    WHERE W.MGR=M.EMPNO AND INITCAP(M.ENAME)='King'; -- SELF JOIN이용

--17. SALES부서 사원의 이름,업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP 
    WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');
SELECT ENAME, JOB FROM EMP E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND DNAME='SALES';

--18. 월급이 부서 30의 최저 월급보다 높은 사원을 출력하는 SELECT문을 작성하시오.
SELECT * FROM EMP WHERE SAL > ANY(SELECT SAL FROM EMP WHERE DEPTNO=30);
SELECT * FROM EMP WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE DEPTNO=30);

--19. 부서 10에서 부서 30의 사원과 같은 업무를 맡고 있는 사원의 이름과 업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP 
    WHERE DEPTNO=10 AND JOB IN(SELECT JOB FROM EMP WHERE DEPTNO=30);

--20. FORD와 업무도 월급도 같은 사원의 모든 정보를 출력하는 SELECT문을 작성하시오.
SELECT * FROM EMP 
    WHERE (JOB, SAL)=(SELECT JOB, SAL FROM EMP WHERE ENAME='FORD') 
        AND ENAME<>'FORD';

--21. 이름이 JONES인 직원의 JOB과 같거나 월급이 BLAKE이상인 사원의 정보를 
    -- 이름,업무,부서번호,급여를 출력. 단, 업무별 알파벳 순, 월급이 많은 순 출력
SELECT ENAME, JOB, DEPTNO, SAL FROM EMP
    WHERE JOB = (SELECT JOB FROM EMP WHERE ENAME='JONES') OR
        SAL>=(SELECT SAL FROM EMP WHERE ENAME='FORD')
    ORDER BY JOB, SAL DESC;

--22. SCOTT 또는 WARD와 월급이 같은 사원의 정보를 이름,업무,급여를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB, SAL FROM EMP
    WHERE SAL IN (SELECT SAL FROM EMP WHERE ENAME IN ('SCOTT','WARD'))
        AND ENAME!='SCOTT' AND ENAME ^= 'WARD';
    
--23. CHICAGO에서 근무하는 사원과 같은 업무를 하는 사원들의 이름,업무를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, JOB FROM EMP
    WHERE JOB IN 
    (SELECT JOB FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND LOC='CHICAGO');
    
--24. 부서별로 월급이 평균 월급보다 높은 사원을 사원번호,이름,급여를 출력하는 SELECT문을 작성하시오.
SELECT EMPNO, ENAME, SAL FROM EMP E
    WHERE SAL > (SELECT AVG(SAL) FROM EMP WHERE E.DEPTNO=DEPTNO);

--25. 업무별 평균 급여보다 급여가 낮은 사원을 부서번호,이름,급여를 출력하는 SELECT문을 작성하시오.
SELECT EMPNO, ENAME, SAL FROM EMP E
    WHERE SAL < (SELECT AVG(SAL) FROM EMP WHERE E.JOB=JOB);
    
--26. 적어도 한명 이상으로부터 보고를 받을 수 있는 사원을 업무,이름,사원번호,부서번호를 출력
    --(단, 부서번호 순으로 오름차순 정렬)
SELECT JOB, ENAME, EMPNO, DEPTNO FROM EMP M
    WHERE EXISTS (SELECT * FROM EMP WHERE MGR=M.EMPNO)
    ORDER BY DEPTNO;  -- EXISTS 이용
SELECT JOB, ENAME, EMPNO, DEPTNO FROM EMP
    WHERE EMPNO IN (SELECT DISTINCT MGR FROM EMP) ORDER BY DEPTNO; -- IN 이용
SELECT DISTINCT M.JOB, M.ENAME, M.EMPNO, M.DEPTNO  
    FROM EMP W, EMP M 
    WHERE W.MGR=M.EMPNO ORDER BY M.DEPTNO; -- SELF JOIN
    
--27. 말단 사원의 사원번호,이름,업무,부서번호를 출력하는 SELECT문을 작성하시오.
SELECT JOB, ENAME, EMPNO, DEPTNO FROM EMP M
    WHERE NOT EXISTS (SELECT * FROM EMP WHERE M.EMPNO=MGR); -- EXISTS

SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP
    WHERE EMPNO NOT IN (SELECT DISTINCT MGR FROM EMP);--NOT을 붙인다고 안되 아래와 같이 함

SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP
    WHERE EMPNO NOT IN (SELECT DISTINCT MGR FROM EMP WHERE MGR IS NOT NULL);--IN

SELECT M.EMPNO, M.ENAME, M.JOB, M.DEPTNO FROM EMP W, EMP M 
    WHERE W.MGR(+)=M.EMPNO AND W.ENAME IS NULL; --SELF JOIN, OUTER JOIN