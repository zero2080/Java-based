DESC EMP;
DESC DEPT;
-- DDL
-- 1. 테이블 생성(CREATE TABLE)
CREATE TABLE BOOK(
    BOOKID NUMBER PRIMARY KEY,
    BOOKNAME VARCHAR2(20),
    PULISHER VARCHAR2(20),
    PRICE NUMBER);
DROP TABLE BOOK;
CREATE TABLE BOOK(
    BOOKID NUMBER,
    BOOKNAME VARCHAR2(20000),
    PULISHER VARCHAR2(20),
    PRICE NUMBER,
    PRIMARY KEY(BOOKID) );
SELECT ROWID, ROWNUM, ENAME FROM EMP;
-- INTERVAL 타입
CREATE TABLE SAM03 (
    DAY01 INTERVAL DAY(3) TO SECOND); -- INTERVAL형
INSERT INTO SAM03 VALUES (INTERVAL '100' DAY(3));
SELECT * FROM SAM03;
DROP TABLE SAM03;

CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(20),
    SAL NUMBER(7,2) );
SELECT * FROM EMP01;
-- 서브쿼리를 이용한 CREATE TABLE
CREATE TABLE EMP02 
    AS 
    SELECT * FROM EMP;
SELECT * FROM EMP;
SELECT * FROM EMP02;
CREATE TABLE EMP03 AS SELECT EMPNO, ENAME FROM EMP;
SELECT * FROM EMP03;
CREATE TABLE EMP04 AS SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;
-- EMP테이블과 구조만 같고 데이터는 없는 EMP05 테이블 생성
CREATE TABLE EMP05 AS SELECT * FROM EMP WHERE 1=0;
SELECT * FROM EMP05;

-- 2. 테이블 구조 수정(ALTER TABLE)
SELECT * FROM EMP01;
SELECT * FROM EMP02;
SELECT * FROM EMP03;
SELECT * FROM EMP04;
SELECT * FROM EMP05;
-- 필드 추가 : EMP01테이블에 JOB필드 추가 - VARCHAR2(30)
ALTER TABLE EMP01
    ADD (JOB VARCHAR2(30), HIREDATE DATE);
SELECT * FROM EMP01;
    --      : EMP03테이블에 JOB필드 추가
ALTER TABLE EMP03 ADD (JOB VARCHAR2(30));
SELECT * FROM EMP03; 
-- 필드 수정(타입 속성 수정) : EMP02 - JOB - VARCHAR2(50)
ALTER TABLE EMP02 MODIFY (JOB VARCHAR2(50));
-- 필드 삭제 : EMP02테이블에 JOB 컬럼 삭제
ALTER TABLE EMP02 DROP COLUMN JOB;
SELECT * FROM EMP02;
    -- 필드 삭제시 바로 삭제가 위험하므로 논리적으로 제한시킴
    ALTER TABLE EMP02 SET UNUSED(MGR);
    SELECT * FROM EMP02;
    ALTER TABLE EMP02 DROP UNUSED COLUMNS; -- 논리적으로 제한 시킨 컬럼 삭제

-- 3. 데이블 삭제(DROP TABLE)
DROP TABLE EMP02;

-- 4. 데이블 내의 데이터 모두 삭제(TRUNCATE)
SELECT * FROM EMP03;
TRUNCATE TABLE EMP03;

-- 5. 테이블 이름 수정
RENAME EMP01 TO EMP001; -- EMP01테이블의 이름이 EMP001로 바꿨어요

-- 6. 데이터 딕셔너리 뷰 (USER_xxx, ALL_XXX, DBA_xxx)
SELECT * FROM USER_TABLES; -- USER_xxxx : SCOTT이 소유한 객체에 대한 정보 조회
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_VIEWS;
SELECT * FROM USER_INDEXES;
SELECT * FROM ALL_TABLES; -- ALL_XXX : SCOTT이 계정으로 접근 가능한 객체에 대한 정보 조회
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_VIEWS;
SELECT * FROM ALL_INDEXES;
SELECT * FROM DBA_TABLES; -- DBA_XXX : 모든 객체 조회(DBA권한=시스템만 조회 가능)
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;
SELECT * FROM DBA_INDEXES;

DROP TABLE EMP05;
SHOW USER ;














